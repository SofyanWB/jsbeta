{"version":3,"file":"static/js/8023.e4cc4203.chunk.js","mappings":"0KAI+BA,E,2CAAE,SAASC,EAAEA,EAAEC,GAAG,IAAIC,EAAED,EAAEE,aAAaD,EAAE,iBAAiBA,GAAG,SAASA,GAAG,SAASA,GAAG,WAAWA,GAAG,wBAAwBA,GAAG,SAASA,IAAIA,EAAE,QAAQA,EAAE,OAAOD,EAAEE,aAAaD,EAAE,IAAME,EAAEH,EAAEI,OAAO,cAAcJ,EAAEI,OAAOC,WAAWC,oBAAoB,UAAU,CAACC,IAAIR,EAAES,QAAQR,GAAG,CAACI,OAAOD,IAAIM,KAAI,yCAAE,WAAMC,GAAC,4FAAoBA,EAAEC,KAAI,sBAAID,EAAEC,gBAAgBC,aAAW,oBAAO,SAASX,GAAG,SAASA,GAAG,SAASA,IAAIY,EAAE,IAAIC,KAAK,CAACJ,EAAEC,OAAO,SAASV,GAAG,SAASA,IAAIH,IAAIA,EAAE,IAAIiB,gBAAgBC,EAAElB,EAAEmB,WAAWJ,GAAG,SAASZ,IAAG,0BAAOiB,EAAEC,KAAKC,MAAMJ,GAAG,MAAK,uBAA8C,MAA9C,yBAAgBlB,GAAC,4BAAOS,IAAIR,EAAEsB,eAAerB,IAAS,IAAIsB,EAAAA,EAAE,iBAAiB,KAAEC,QAAQzB,GAAE,YAAIoB,EAAEM,MAAK,iBAA4C,MAApC1B,GAAC,kBAAKoB,EAAEM,OAAK,IAACjB,IAAIR,EAAEsB,eAAerB,IAAS,IAAIsB,EAAAA,EAAE,iBAAiBJ,EAAEM,MAAMD,QAAQzB,GAAE,gCAAmB,GAAnB,KAAO,WAAWG,GAAC,sBAAkB,OAAfS,EAAEC,KAAKP,OAAOD,EAAC,UAASsB,MAAMf,EAAEC,KAAKJ,IAAIG,EAAEC,MAAK,QAAhCe,EAAC,OAAgChB,EAAEiB,WAAWD,EAAEE,OAAM,aAAS3B,EAAC,OAAM,SAAN,KAAY,GAAe,SAAf,KAAqB,GAAe,WAAf,KAAuB,GAAe,SAAf,KAAqB,oBAA5D,OAAJ4B,EAAEhB,EAAE,6BAAqB,OAAJgB,EAAEX,EAAE,6BAAuB,OAAJW,EAAEH,EAAE,6BAAqB,OAAJG,EAAEb,EAAE,6BAAca,EAAEnB,EAAEC,KAAI,iCAAO,CAACA,KAAKkB,EAAEF,WAAWjB,EAAEiB,WAAWN,eAAerB,EAAE8B,IAAIpB,EAAEoB,IAAIvB,IAAIR,IAAE,yDAAC,mDAA1sB,GAA4sB,C","sources":["../node_modules/@arcgis/core/core/workers/request.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport e from\"../Error.js\";let t;function s(s,a){let r=a.responseType;r?\"array-buffer\"!==r&&\"blob\"!==r&&\"json\"!==r&&\"native\"!==r&&\"native-request-init\"!==r&&\"text\"!==r&&(r=\"text\"):r=\"json\",a.responseType=r;const n=a.signal;return delete a.signal,globalThis.invokeStaticMessage(\"request\",{url:s,options:a},{signal:n}).then((async o=>{let i,l,u,c,p;if(o.data)if(o.data instanceof ArrayBuffer){if(!(\"json\"!==r&&\"text\"!==r&&\"blob\"!==r||(i=new Blob([o.data]),\"json\"!==r&&\"text\"!==r||(t||(t=new FileReaderSync),c=t.readAsText(i),\"json\"!==r)))){try{l=JSON.parse(c||null)}catch(b){const t={...b,url:s,requestOptions:a};throw new e(\"request:server\",b.message,t)}if(l.error){const t={...l.error,url:s,requestOptions:a};throw new e(\"request:server\",l.error.message,t)}}}else\"native\"===r&&(o.data.signal=n,u=await fetch(o.data.url,o.data),o.httpStatus=u.status);switch(r){case\"blob\":p=i;break;case\"json\":p=l;break;case\"native\":p=u;break;case\"text\":p=c;break;default:p=o.data}return{data:p,httpStatus:o.httpStatus,requestOptions:a,ssl:o.ssl,url:s}}))}export{s as execute};\n"],"names":["t","s","a","r","responseType","n","signal","globalThis","invokeStaticMessage","url","options","then","o","data","ArrayBuffer","i","Blob","FileReaderSync","c","readAsText","l","JSON","parse","requestOptions","e","message","error","fetch","u","httpStatus","status","p","ssl"],"sourceRoot":""}